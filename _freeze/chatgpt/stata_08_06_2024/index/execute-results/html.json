{
  "hash": "d39b9593da3bd58d220e427c78182110",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Stata Crash Course: Graphs and EDA\"\ndescription: \"A brief introduction to Graphs production in Stata\"\nauthor: \"Fernando Rios-Avila\"\ndate: \"8/6/2024\"\ncategories: \n    - Stata\n    - Basics\ndraft: false\ncache: true\nfreezer: true\n---\n\n\n# Introduction\n\nThe last part of the series of Stata Basics: Graphs! In this quick tutorial should provide you with a solid foundation for creating high-quality graphs in Stata. Granted, Stata's graphing capabilities are not as flexible and fast as R or Python, but they are still powerful and can produce almost every type of graph you might need.\n\nBut before we start, a brief comment on graphs in Stata. One of the most important things when making good graphs is to choose good colors, and good schemes (or themes). Up to Stata 17, the default color scheme was `s2color`, which is not the best. In Stata 18, a new color scheme was introduced, which is more visually appealing. Of course, if you have an earlier version of Stata, you may want to consider other options. \n\nSo, to get you in the right path, you may want to first get few things installed in your Stata.\n\n```stata\nnet install palettes , replace from(\"https://raw.githubusercontent.com/benjann/palettes/master/\")\nnet install colrspace, replace from(\"https://raw.githubusercontent.com/benjann/colrspace/master/\")\nssc install grstyle\nssc install color_style\n```\n\n`palette` and `colrspace`, both by Ben Jann, are packages that allow you to easily create colors that can be used as part of your scheme. `grstyle`, also by Ben Jann, is another small tool that is very useful to make changes in the scheme files.\n\nFinally, a small wrapper of my own design: `color_style`. This package uses the previous ones for one main purpose. Change the color palettes used in the current scheme. That way, you do not need to make changes manually, and can easily change colors as needed. Now a quick setup:\n\n::: {#7e079999 .cell outcome='false' execution_count=1}\n``` {.stata .cell-code}\nset scheme white2\ncolor_style tableau\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>div.jp-Notebook .datagrid-container {min-height: 448px; }</style>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nPERSONAL directory (see personal) does not exist; will create directory\nC:\\Users\\frios\\ado\\personal/\npress any key to continue, or Break to abort\n```\n:::\n:::\n\n\n## Why Data Visualization Matters\n\nBefore we start with the guide, a quick word on why data visualization matters the data analysis process:\n\n1. **Exploratory Data Analysis (EDA)**: Visualizations help you understand the structure of your data, identify patterns, and spot anomalies or outliers.\n2. **Hypothesis Generation**: Graphs can reveal relationships between variables that you might not have anticipated, leading to new research questions.\n3. **Communication**: A well-designed graph can show information quickly and effectively to your audience.\n4.  **Quality Control**: Visualizations can help you identify data quality issues or errors in your analysis.\n\nWith these benefits in mind, let's begin!\n\n## Getting Started with Stata Graphs\n\nBefore we start making graphs, let's start with a brief overview of Stata's graphing syntax and some basic principles.\n\n### Stata's Graph Syntax\n\nMost Stata graph commands follow a similar structure:\n\n```stata\ngraph_type y_variable(s) [x_variable] [if] [in] [weight] [, options]\n```\n\nWhere:\n- `graph_type` is the type of graph you want to create (e.g., scatter, line, bar)\n- `y_variable` is typically the dependent variable\n- `x_variable` is typically the independent variable\n- `[if]` and `[in]` are optional conditions to subset your data\n- `[weight]` is an optional weighting specification\n- `[, options]` are additional specifications to customize your graph\n\nIn terms of Graph Types, we could possibly classify them into two main categories. you have the `two way` graphs, and the `graph` graphs. \n\nThe first type are graphs that can be overlaid on top of each other. The second, however, cannot be overlay. In addition to that, most community-contributed commands are typically `two way` graphs. However, they cannot be `overlayed` with the official ones. Which Its perhaps the biggest weakness of Stata's graphical capabilities.\n\n## Your First Stata Graph\n\nLet's create a simple scatter plot to get started. We'll use the built-in \"auto\" dataset:\n\n```stata\nsysuse auto, clear\nscatter mpg weight\n\nscatter mpg weight, title(\"Miles per Gallon vs. Weight\") /// Adds a title\n                    xtitle(\"Weight (lbs)\") /// label to the x-axis\n                    ytitle(\"Miles per Gallon\") // and y-axis \n```\n\nDone! \n\nNow some points to consider. `title` is important, but often you may want to add a title in your editor, not the figure. Same if you add a note. Otherwise, the above code is a good start.\n\nAlso noticed that because of my setup using `white2` scheme, the background is white, and minimalistic. The colors, from `tableau` are generally a good choice for most graphs.\n\nWait, but how does this look like? Let's see:\n\n::: {#862be875 .cell execution_count=2}\n``` {.stata .cell-code code-fold=\"true\"}\nsysuse auto, clear\nscatter mpg weight, title(\"Miles per Gallon vs. Weight\") /// Adds a title\n                    xtitle(\"Weight (lbs)\") /// label to the x-axis\n                    ytitle(\"Miles per Gallon\") /// and y-axis \n                    scale(1.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){fig-align='center'}\n:::\n:::\n\n\nFrom here on, I will produce the figures directly, and you can check the code to reproduce them in your own work.\n\n# Graph Types\n\n## Scatter Plots\n\nScatter plots, what we just did, its perhaps the most basic plot you will use. They are excellent for visualizing the relationship between two **continuous** variables. They can reveal patterns, correlations, and outliers in your data.\n\nThe basic syntax for a scatter plot is:\n\n```stata\nscatter [varlist y] [xvar] [if] [in] [weight] [, options]\n```\n\nAs you may expect, `varlist y` can be a list of variables, all which will be plotted against `xvar`. However, I would recommend you to use only one variable at a time. \n\nIf multiple variables are required, you can use `twoway` to overlay them.\n\n```stata\ntwoway (scatter [yvar1] [xvar] [if] [in] [weight] [, options]) /// <-first\n       (scatter [yvar2] [xvar] [if] [in] [weight] [, options]) // <-second\n```\n\nEach scatter plot can have its own options, colors, and labels.\n\nFor example:\n\n::: {#e673bdb2 .cell execution_count=3}\n``` {.stata .cell-code code-fold=\"true\"}\nsysuse auto, clear\ntwoway (scatter mpg weight if foreign==0) ///\n       (scatter mpg weight if foreign==1) ///\n        , title(\"Miles per Gallon vs. Weight: By foreign\") ///\n          xtitle(\"Weight (lbs)\") ///\n          ytitle(\"Miles per Gallon\") ///\n          scale(1.5) ///\n          legend(order(1 \"Domestic\" 2 \"Foreign\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-2.png){fig-align='center'}\n:::\n:::\n\n\nNow this plot is combining various features. \n\n- The `twoway` command (`two` for short) is used to overlay the two scatter plots.\n- `legend` adds a legend to the graph, specifying the order of the labels. In `white2` scheme, the legend is at the left of the graph.  \n  If you would like to change the position of the legend, you can use `position(#)`, where `#` is a number from 1 to 12. You may also want to use `cols(#)` or `rows()` to change the layout of the legend.\n\n```stata\nlegend(order(1 \"Domestic\" 2 \"Foreign\") position(3) cols(1))\n```\n\n### Customizing Markers\n\nYou can change the appearance of the markers using various options, like `mcolor()`, `msymbol()`, or `msize()`. From all of these, I prefer using `pstyle()` to change the colors, and other options for the size of shape, because `pstyle()` is connected to the color scheme you are using, and `mcolor()` for added options like transparency. Lets try this with the previous example:\n\n::: {#1e5c0ea3 .cell execution_count=4}\n``` {.stata .cell-code code-fold=\"true\"}\nsysuse auto, clear\ntwoway (scatter mpg weight if foreign==0, pstyle(p3) msize(2)) ///\n       (scatter mpg weight if foreign==1, pstyle(p5) mcolor(%50)) ///\n        , title(\"Miles per Gallon vs. Weight: By foreign\") ///\n          xtitle(\"Weight (lbs)\") ///\n          ytitle(\"Miles per Gallon\") ///\n          scale(1.5) ///\n          legend(order(1 \"Domestic\" 2 \"Foreign\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){fig-align='center'}\n:::\n:::\n\n\n### Other interesting options\n\nThere are other options you may want to try. For example, `mlabel()` and `mlabsize()` to add labels to the points. Just be careful with the size of the labels, as the figure could become very busy. If you try the code below, you will see that the figure is not very informative.\n\n```stata\nscatter mpg weight, mlabel(make) ///\n                    mlabsize(tiny)\n```\n\nThis adds the car make as a label to each point.\n\n### Advanced Scatter Plot\n\nLet's combine several elements to create a more informative scatter plot:\n\n::: {#56e72fcb .cell execution_count=5}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (scatter mpg weight, mcolor(%30) msize(5) ) ///\n    (scatter mpg weight in 1/5,  pstyle(p1) mlabel(make) mlabsize(small) ), ///\n                    title(\"MPG vs. Weight\") ///\n                    subtitle(\"1978 Automobile Data\") ///\n                    xtitle(\"Weight (lbs)\") ytitle(\"Miles per Gallon\") ///\n                    note(\"Source: Auto dataset\") ///\n                    legend(off) scale(1.4)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){fig-align='center'}\n:::\n:::\n\n\nThis plot includes:\n- Semi-transparent circles\n- Labels for few points (car make)\n- Informative title, subtitle, and axis labels\n- A note indicating the data source\n- No legend (turned off) (every time you have more than 1 plot, the legend will be displayed)\n\n### A Different type of scatter Plot\n\nWhile you can always use scatter plot for plotting multiple  multiple variables, any now and then you will need a more \"brute force approach\", where a large set of variables are plotted at aonce. If you are interested in this, you can use a scatter plot matrix. It has the following syntax:\n\n```stata\ngraph matrix [varlist], [half]\n```\n\nWhere `varlist` is a list of variables to be plotted. This will make a matrix of scatter plots for all pairs of the specified variables. The `half` option will only plot the lower half of the matrix. Of course, such a plot can be very busy, so be careful with the number of variables you include. Here an example:\n\n::: {#51628331 .cell execution_count=6}\n``` {.stata .cell-code code-fold=\"true\"}\ngraph matrix price mpg weight length, half ///\n  xsize(12) ysize(8) title(\"Scatter Plot Matrix\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Line Plots\n\nLine plots are the second most common type of plot you will use. They are excellent for visualizing trends over time or another continuous variable. \n\nIn general, I would classify them in three types. The basic line plot, and model based line plots. \n\nThe basic lineplot is the one that uses all the data to create a plot, going from one coordinate to the next. Think of it as a connect the dots plot. Because of this, the plot can be very different depending on the order of the data.\n\nThe model based plot is often more useful, as it uses some univariate model (linear, quadratic, etc) to create the line. This is often more useful, as it can show the trend of the data, without the noise.\n\nLets start with the basic line plot:\n\n### Basic Line Plot\n\nSimilar to scatter plots, you can use multiple variables in a line plot, to be plotted against a single variable. \n\n::: {#b0278c10 .cell execution_count=7}\n``` {.stata .cell-code code-fold=\"true\"}\nsysuse uslifeexp, clear\nline le_w le_m year, ///\n  title(Life expectancy for men and women over time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(US life expectancy, 1900–1999)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-2.png){fig-align='center'}\n:::\n:::\n\n\nWhich works well, because the data was ordered by year. If i were to order it by Life expectancy, the plot would be very different, bordering non-sensical.\n\n::: {#a82cee92 .cell execution_count=8}\n``` {.stata .cell-code code-fold=\"true\"}\nsysuse uslifeexp, clear\nsort le_w\nline le_w le_m year, ///\n  title(Life expectancy for men and women over time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(US life expectancy, 1900–1999)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){fig-align='center'}\n:::\n:::\n\n\n### Customizing Line Styles\n\nThis plot allows for a few customizations. For example, you can change the line style, color, and width:\n\n::: {#edf9d10f .cell execution_count=9}\n``` {.stata .cell-code code-fold=\"true\"}\nsort year\nline le_w le_m year, lpattern(solid dash) ///\n            pstyle(p2 p3) ///\n            lwidth(thick medium) ///\n            xline(1930/1936, lw(2) lp(solid) lcolor(gs12)) ///\n            title(Life expectancy for men and women over time)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){fig-align='center'}\n:::\n:::\n\n\nIn addition to the line, I also added some shading for the years 1930 to 1936. Useful if you want to emphasize a particular period.\n\n\n### Advanced Customization\n\nAs with Scatter plot, and infact most two-way plots, you can customize the plot in many ways. \n\n::: {#0b71377b .cell execution_count=10}\n``` {.stata .cell-code code-fold=\"true\"}\nline le_w le_m year, lpattern(solid dash) ///\n                     lcolor(red blue) ///\n                     lwidth(medthick medium) ///\n                     title(\"Life Expectancy Trends\") ///\n                     subtitle(\"United States, 1900-2000\") ///\n                     xtitle(\"Year\") ytitle(\"Life Expectancy (years)\") ///\n                     ylabel(40(10)80, angle(0)) ///\n                     xlabel(1900(20)2000) ///\n                     legend(order(1 \"Women\" 2 \"Men\")) ///\n                     note(\"Source: US Life Expectancy dataset\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){fig-align='center'}\n:::\n:::\n\n\n### Model based line plot\n\nSomething that its recommended to use more often are model-based line plots. That means that you are not plotting the data, but the predictions of a model. This is useful to better see patterns when the data is noisy.\n\nLets use the `dui` dataset and produce a combination of scatter plot with a line plot. On top of that, we will use confidence intervals. (typically means adding a `ci` to the command)\n\nLets see how they look like:\n\n::: {.panel-tabset}\n\n## Linear Fit\n\n::: {#35d2ea0a .cell outcome='false' execution_count=11}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\ntwo (scatter citations fines) ///\n    (lfitci citations fines,  fcolor(%40)) , ///\n    legend(off) scale(1.4) ///\n    ytitle(\"Citations\") xtitle(\"Fines in 000$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-2.png){fig-align='center'}\n:::\n:::\n\n\n## Quadratic Fit\n\n::: {#739a9f92 .cell outcome='false' execution_count=12}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\ntwo (scatter citations fines) ///\n    (qfitci citations fines,  fcolor(%40)) , ///\n    legend(off) scale(1.4) ///\n    ytitle(\"Citations\") xtitle(\"Fines in 000$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-2.png){fig-align='center'}\n:::\n:::\n\n\n## NonParametric Fit\n\n::: {#3a814ed4 .cell outcome='false' execution_count=13}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\ntwo (scatter citations fines) ///\n    (lpolyci citations fines,  fcolor(%40)) , ///\n    legend(off) scale(1.4) ///\n    ytitle(\"Citations\") xtitle(\"Fines in 000$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-2.png){fig-align='center'}\n:::\n:::\n\n\n:::\n\n## Histograms, Density Plots and Box Plots\n\nWhen it comes to visualizing the distribution of a single variable, your main options are histograms, density plots, and box plots. Histograms and `kdensity` plots are both `twoway` plots that can be overlayed. Box plots, however, are `graph` plots, and are a bit more temperamental.\n\n### Histograms\n\nThe first command we will see is the `histogram` command. This command is used to create histograms, which are bar charts that show the frequency distribution of a single variable.\n\nIn contrast with frequency tables, where you need to define the bins width or number of bins, histograms will do this for you. Not always in the best way, but it will do it.\n\nThe basic syntax for a histogram is:\n\n```stata\nhistogram [varname] [if] [in] [weight] [, options]\n```\n\nPerhaps the biggest complain I have about histograms is that they do not allow for aweights. So if your weights are fractional, you may need to consider other works around.\n\nLets see how this works\n\n### Basic Histogram\n\nThe basic histogram plot will try to produce densities on the y-axis. It usually labels it correctly. \n\nYou can, however, request `frequency` or `percent` on the y-axis.\n\n::: {#07be873e .cell execution_count=14}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\n\nhistogram fines, ///\n  title(\"Histogram of Fines\") ///\n  xtitle(\"Fines in 000$\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n(bin=22, start=7.4000001, width=.2090909)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-2.png){fig-align='center'}\n:::\n:::\n\n\nBy default, histogram will calculate the number of bins for you. However, you can specify the number of bins using the `bin()` option. Alternatively, you can use `width()` instead, making it either more or less granular.\n\n::: {.panel-tabset}\n\n## Wider Width()\n\n::: {#d75863cf .cell execution_count=15}\n``` {.stata .cell-code code-fold=\"true\"}\nhistogram fines, ///\n  title(\"Histogram of Fines\") ///\n  xtitle(\"Fines in 000$\") width(.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(bin=12, start=7.4000001, width=.4)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-2.png){fig-align='center'}\n:::\n:::\n\n\n## Narrower Width()\n\n::: {#93af59ef .cell execution_count=16}\n``` {.stata .cell-code code-fold=\"true\"}\nhistogram fines, ///\n  title(\"Histogram of Fines\") ///\n  xtitle(\"Fines in 000$\") width(.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(bin=46, start=7.4000001, width=.1)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-2.png){fig-align='center'}\n:::\n:::\n\n\n:::\n\nWider bins will make the plot more general, but you lose some of the detail. Narrower bins will make the plot more detailed, but you may lose the overall picture. Its the classic bias-variance tradeoff.\n\n### Overlaying Histograms\n\nAs mentioned before, because histograms are `twoway` plots, you can overlay them. This is useful when you want to compare the distribution of a variable across different groups (Low number of groups). Note that by default, histograms come with just one color, but you can change this using the `pstyle()` option.\n\nYou may want to use transparency to make the plot more readable. and even use other options to make the plot visually appealing.\n\nFor the last example, I will also use a `global` to pass options that are common to all subplots.\n\n::: {.panel-tabset}\n\n## Simple Overlap\n\n::: {#61890f3a .cell execution_count=17}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (histogram citations if csize==1, pstyle(p1)) ///\n    (histogram citations if csize==2, pstyle(p2)) ///\n    (histogram citations if csize==3, pstyle(p3)) , ///\n    title(\"Histogram of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## With Transparency\n\n::: {#5afcce97 .cell execution_count=18}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (histogram citations if csize==1, pstyle(p1) color(%75)) ///\n    (histogram citations if csize==2, pstyle(p2) color(%75)) ///\n    (histogram citations if csize==3, pstyle(p3) color(%75)), ///\n    title(\"Histogram of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Fixing widths\n\n::: {#8bcb112f .cell execution_count=19}\n``` {.stata .cell-code code-fold=\"true\"}\nglobal options width(3) start(0) color(%55)\ntwo (histogram citations if csize==1, pstyle(p1) $options) ///\n    (histogram citations if csize==2, pstyle(p2) $options) ///\n    (histogram citations if csize==3, pstyle(p3) $options), ///\n    title(\"Histogram of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){fig-align='center'}\n:::\n:::\n\n\n::: \n\nOne more note. Histograms assume your dependent variable is continuous. However, you could also use them as discrete, by simply adding the `discrete` option. Unless `width()` is specified, each bar will represent a single value.\n\n## Kernel Density Plots\n\nAs mentione before, histograms are a good way to visualize distributions of a single variable. Something that histograms do not do well is provide a smooth estimate of the probability density function. And, in Stata, its not possible to add fractional weights to histograms. \n\nThere is, however, another option. Kernel Density Plots. These plots provide a smooth estimate of the probability density function of a variable. As with Histograms, they can be very sensitive to the choice of bandwidth (how smooth or rugged the plot is). \n\nOne should also note that Kernel density plots cannot be used to plot distributions of discrete variables, and may provide misleading results if used with data that have constraints, or very relevant modes.\n\nThe basic syntax for a kernel density plot is:\n\n```stata\nkdensity [varname] [if] [in] [weight] [, options]\n```\n\nAnd because its a `twoway` plot, you can overlay them with other plots.\n\n### Basic Kernel Density Plot\n\nLets see how this works with the `dui` dataset.\n\n::: {#04befef5 .cell execution_count=20}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\nkdensity citation, ///\n  title(\"Kernel Density Estimate of Citations\") ///\n  xtitle(\"# of Citations\") ///\n  ytitle(\"Density\") scale(1.5) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-2.png){fig-align='center'}\n:::\n:::\n\n\nNoticed how smooth the plot is. The `bwidth` was set to 2.31, which is constructed using a rule of thumb. It also uses `epanechnikov` as the default kernel. While you can change the `kernel()` function, the default one is \"optimal\" for most cases. What would be more important is the `bwidth()` option.\n\n### Kernel Densities and bandwidth choice\n\nAs mentioned before, the bandwidth is a very important parameter. You can set it manually, with the understanding that a smaller bandwidth will make the plot more rugged, and a larger bandwidth will make it smoother. At the limit (infinite bandwidth), the plot will be a horizontal line, and on the other end, it would look like a histogram (each value its own curve)\n\n::: {.panel-tabset}\n\n## Smaller Bandwidth \n\n::: {#6dea5809 .cell execution_count=21}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\nkdensity citation, ///\n  title(\"Kernel Density Estimate of Citations\") ///\n  xtitle(\"# of Citations\") ///\n  ytitle(\"Density\") scale(1.5) bw(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-2.png){fig-align='center'}\n:::\n:::\n\n\n## Larger Bandwidth \n\n::: {#57456b92 .cell execution_count=22}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\nkdensity citation, ///\n  title(\"Kernel Density Estimate of Citations\") ///\n  xtitle(\"# of Citations\") ///\n  ytitle(\"Density\") scale(1.5) bw(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-2.png){fig-align='center'}\n:::\n:::\n\n\n:::\n\nPerhaps of interest to some, the Kernel Density does not estimate the bandwidth for every point of data. Instead, it uses a map of points to reduce the computational burden. Then, simply makes a `lineplot`. If you want to see the curve for every point in your data, you have to use the `at()` option.\n\n### Curves, Areas, and Overlays\n\nMany of the options you can use with histograms, scatterplots or line plots can also be used with Kernel Density plots. However, I will introduce one that some may find useful: `recast`. This option allows you to change the plot type from a line to something else. For example, you can use `recast(area)` to fill the area under the curve.\n\n::: {#baead26d .cell execution_count=23}\n``` {.stata .cell-code code-fold=\"true\"}\nwebuse dui, clear\nkdensity citation, ///\n  title(\"Kernel Density Estimate of Citations\") ///\n  xtitle(\"# of Citations\") ///\n  ytitle(\"Density\") scale(1.5) ///\n  recast(area) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Fictional data on monthly drunk driving citations)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-2.png){fig-align='center'}\n:::\n:::\n\n\nThis is not the most effective way of changing the plot type, but does the work if the data is small. With larger datasets, other methods may be more useful.\n\nWhat about overlaying? We can do that as well, as we did with histograms. Ohh, and in contrast with histograms, you do not need to specify colors, as you did with histograms.\n\n::: {.panel-tabset}\n\n## Simple Overlap\n\n::: {#7b540e40 .cell execution_count=24}\n``` {.stata .cell-code code-fold=\"true\"}\nglobal options bw(3)\ntwo (kdensity citations if csize==1, $options ) ///\n    (kdensity citations if csize==2, $options ) ///\n    (kdensity citations if csize==3, $options ) , ///\n    title(\"kdensity of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-25-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## As an Area\n\n::: {#fead4064 .cell execution_count=25}\n``` {.stata .cell-code code-fold=\"true\"}\nglobal options bw(3) recast(area  )\ntwo (kdensity citations if csize==1, $options ) ///\n    (kdensity citations if csize==2, $options ) ///\n    (kdensity citations if csize==3, $options ) , ///\n    title(\"kdensity of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-26-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Adding transparency\n\n::: {#b06fd386 .cell execution_count=26}\n``` {.stata .cell-code code-fold=\"true\"}\nglobal options bw(3) recast(area) color(%50)\ntwo (kdensity citations if csize==1, $options ) ///\n    (kdensity citations if csize==2, $options ) ///\n    (kdensity citations if csize==3, $options ) , ///\n    title(\"kdensity of citations\") ///\n    subtitle(\"By city Size\") ///\n    xtitle(\"Fines in 000$\") ///\n    legend(order(1 \"Small\" 2 \"Medium\" 3 \"Large\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-27-output-1.png){fig-align='center'}\n:::\n:::\n\n\n::: \n\nFew things to notice here.\n\n- Because im using less data, the default bandwidth makes a rougher plot. I increase it to 3 to make it smoother.\n- Since the data by groups have \"hard\" limits, the plots are cut at the edges. \n- These plot cannot be used to compare the sizes of the groups, as the area under the curve is the same by definition.\n  \n## Range plots\n\nThere is a fairly large list of plots that fall under this category. Range plots are mostly used to show, as the name implies, a particular range of values. Perhaps the most common of these would be to show confidence intervals.\n\nThey all have a similar syntax:\n\n```stata\ntwo range_plot y_lower y_higher x_variable [if] , [options]\n```\n\nAs you can see, the main difference is that you need to specify a lower and upper bound for the y-axis. And, as you can imagine, this will generate a nice rendition of a range.\n\nPerhaps the biggest issue with these plots is that you need to prepare the data beforehand. This is not a big issue.\n\nSo lets see how this works:\n\n### Ranges Galore\n\nTo show how this type of plots work, I will use the dataset `cattaneo2`. This dataset contains data for childrens weight at birth, in addition to other relevant information. I will do some data manipulation to create the data I need for the plots\n\n::: {#4c16766f .cell outcome='false' execution_count=27}\n``` {.stata .cell-code code-fold=\"false\"}\nwebuse cattaneo2, clear\n// Constrain age of mother\ndrop if mage<18 | mage>35\n// Get summary for  Weight at birth\n// mean and p25 and p75 by age and smoking\ncollapse (mean) mean_bweight=bweight ///\n         (p25) p25_bweight=bweight ///\n         (p75) p75_bweight=bweight, by(mage mbsmoke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Excerpt from Cattaneo (2010) Journal of Econometrics 155: 138–154)\n(488 observations deleted)\n```\n:::\n:::\n\n\nNow that we have the data, lets create the plot(s). Each one will show the range of weights at birth for different groups of mothers. To add additional information, I will also add the mean \"weight at birth\" as a scatter plot.\n\n::: {.panel-tabset}\n\n## Area\n\n::: {#79971c27 .cell execution_count=28}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rarea p25_bweight p75_bweight mage if mbsmoke==0, color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(off) scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-29-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Bar\n\n::: {#b5aa2b2e .cell execution_count=29}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rbar p25_bweight p75_bweight mage if mbsmoke==0, color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(off) scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-30-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Spike\n\n::: {#da3fedf8 .cell execution_count=30}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rspike p25_bweight p75_bweight mage if mbsmoke==0, color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(off) scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## Cap\n\n::: {#4e5da791 .cell execution_count=31}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rcap p25_bweight p75_bweight mage if mbsmoke==0, color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(off) scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-32-output-1.png){fig-align='center'}\n:::\n:::\n\n\n## CapSym\n\n::: {#f37be9a6 .cell execution_count=32}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rcapsym p25_bweight p75_bweight mage if mbsmoke==0, color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(off) scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-33-output-1.png){fig-align='center'}\n:::\n:::\n\n\n:::\n\nThe rest (rscatter, rline and rconnected) are not very useful, as they are just a scatter plot, line plots, or both.\n\nAnd of course, you can combine them!\n\n::: {#313be8f5 .cell execution_count=33}\n``` {.stata .cell-code code-fold=\"true\"}\ntwo (rarea p25_bweight p75_bweight mage if mbsmoke==0, pstyle(p1) color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==0, pstyle(p1) connect(l)) ///\n    (rarea p25_bweight p75_bweight mage if mbsmoke==1, pstyle(p2) color(%50)) ///\n    (scatter mean_bweight mage if mbsmoke==1, pstyle(p2) connect(l)) , ///\n    title(\"Range of Birth Weight by Mother's Age\") ///\n    xtitle(\"Mother's Age\") ///\n    ytitle(\"Birth Weight (lbs)\") ///\n    legend(order(1 \"NonSmokers\" 3 \"Smokers\")) ///\n    scale(1.4) ///\n    note(\"Note: The shaded area represents the 25th to 75th percentile range\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-34-output-1.png){fig-align='center'}\n:::\n:::\n\n\n# Conclusion\n\nThis are the most basic, yet most useful plots you will use in your data analysis. There are, however, other types of plots that Stata can produce from the box:\n\n- `graph pie`: Pie charts\n- `graph bar`: Bar charts, where the bars can be horizontal or vertical, stacked or unstacked, by groups, which can be used to represent many statistical summaries. (The command itself will generate those summaries)\n- `graph dot`: Dot plots, which are similar to bar charts but use dots instead of bars. Useful to compare summary statistics with a less cluttered plot. Not to be confused with `twoway dot`.\n\nThere are also the `pair coordinated` plots. Where you provide 4 variables, which indicate the initial and final coordinates of a line. So something to keep in mind.\n\nOther than this, there are many community-contributed commands that can be used to create more complex plots, including my own contributions. For for basic data analysis, the above should be more than enough.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}