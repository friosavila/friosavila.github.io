{
  "hash": "33e84d71b2f42fc9e221138813e091a7",
  "result": {
    "markdown": "---\ntitle: \"Renaming variables in Bulk\"\ndescription: \"I describe an extended option from rename to easily rename your variabes\"\nauthor: \"Fernando Rios-Avila and Fahad Mirza\"\ndate: \"6/02/2023\"\ncategories: \n    - Stata\n    - Tips\nformat:\n  html:\n    code-line-numbers: true\n    mermaid:\n      theme: neutral\ndraft: false\n---\n\n## Aknowledgements\n\nThis tip was brought to you by Fahad Mirza. Its one of those little things I have found useful, but usually forget, and have to look for it all over again. \n\nLuckily, I know have my own site, where I can save and store this information! I give, however, total creadit to Fahad. \n\n## The problem\n\nThe problem is simple. Some times, you may have a series of variables with somewhat unappealing names. I particuarly dislike names that are too long. While some people like having descriptive variable names, I find it particularly distracting.\n\nMy preference is to have variables with good labels, and/or good value labels, whenever necessary. For variables themselves, I like short names, that are descriptive, however, I also like to have them labeled sequentially!.\n\nHow do we do that?\n\nObviously, the first approach is to go one by one. In fact, not too many `Stata's` ago, that was the only option. That particular task could have been done using loops as follows:\n\n::: {.cell execution_count=1}\n``` {.stata .cell-code code-fold=\"false\"}\nsysuse auto, clear\n* This loop iterates over all variable names in the dataset\nforeach i of varlist * {\n    local j = `j'+1\n    ren `i' var_`j'\n}\ndescribe *\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>div.jp-Notebook .datagrid-container {min-height: 448px; }</style>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nvar_1           str18   %-18s                 Make and model\nvar_2           int     %8.0gc                Price\nvar_3           int     %8.0g                 Mileage (mpg)\nvar_4           int     %8.0g                 Repair record 1978\nvar_5           float   %6.1f                 Headroom (in.)\nvar_6           int     %8.0g                 Trunk space (cu. ft.)\nvar_7           int     %8.0gc                Weight (lbs.)\nvar_8           int     %8.0g                 Length (in.)\nvar_9           int     %8.0g                 Turn circle (ft.)\nvar_10          int     %8.0g                 Displacement (cu. in.)\nvar_11          float   %6.2f                 Gear ratio\nvar_12          byte    %8.0g      origin     Car origin\n```\n:::\n:::\n\n\n## There is a better way\n\nWhile the process above is rather simple, there is a better way of doing this, as Fahad suggests. That is using some of the extended options of `rename`.\n\nLets first replicate the code above, using the code that Fahad suggested.\n\n::: {.cell execution_count=2}\n``` {.stata .cell-code code-fold=\"false\"}\nsysuse auto, clear\nren (*) (var_#), addnumber\ndescribe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n\nContains data from C:\\Program Files\\Stata17/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nvar_1           str18   %-18s                 Make and model\nvar_2           int     %8.0gc                Price\nvar_3           int     %8.0g                 Mileage (mpg)\nvar_4           int     %8.0g                 Repair record 1978\nvar_5           float   %6.1f                 Headroom (in.)\nvar_6           int     %8.0g                 Trunk space (cu. ft.)\nvar_7           int     %8.0gc                Weight (lbs.)\nvar_8           int     %8.0g                 Length (in.)\nvar_9           int     %8.0g                 Turn circle (ft.)\nvar_10          int     %8.0g                 Displacement (cu. in.)\nvar_11          float   %6.2f                 Gear ratio\nvar_12          byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: var_12\n     Note: Dataset has changed since last saved.\n```\n:::\n:::\n\n\nThis is a much shorter, and cleaner code. What it does is take all variables within the first parenthesis to be rename using the instructions of the second set. Of course rename has quite few other options that you may find useful. Just type `help rename group`, to see all other extended options.\n\nBefore ending this `tip`. Something else you may find useful. You can use the option `dryrun`. Doing this none of the variable names will change, but instead you will see a report of how variable names will change after the command is executed.\n\n::: {.cell execution_count=3}\n``` {.stata .cell-code code-fold=\"false\"}\nsysuse auto, clear\nren (*) (var_#), addnumber dryrun\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n\n       oldname | newname\n  -------------+-------------\n          make | var_1\n         price | var_2\n           mpg | var_3\n         rep78 | var_4\n      headroom | var_5\n         trunk | var_6\n        weight | var_7\n        length | var_8\n          turn | var_9\n  displacement | var_10\n    gear_ratio | var_11\n       foreign | var_12\n  ---------------------------\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}