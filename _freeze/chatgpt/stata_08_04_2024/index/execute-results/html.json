{
  "hash": "ce45d792d6fa9cba660953495bab2c74",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Stata Crash Course: Publication Ready Tables\"\ndescription: \"Producing tables for publication using Stata\"\nauthor: \"Fernando Rios-Avila\"\ndate: \"8/4/2024\"\ncategories: \n    - Stata\n    - Basics\ncache: true\ndraft: false\n---\n\nContinuing this quick series of guides with Stata. Something we all need. Tables! Tables are a fundamental part of presenting research results, and there is a community-contributed command that makes it easy to create publication-ready tables in Stata: `estout/esttab/estpost`. These command come to you thanks to **Ben Jann**. They allow you to generate tables from estimation results, matrices, in a format suitable for publication, including HTML, LaTeX and Markdown.\n\nOf course, for this you need a quick setup:\n\n```stata\n// Install estout package\nssc install estout\n```\n\n#  Summary Statistics \n\nOne of the most common tasks in data analysis is to generate summary statistics. We all know that the easiest way to do this is to use the `summarize` command. However, making statics tables from the command is not straightforward. However, with `estpost`, you can easily generate summary statistics tables.\n\nLet's start with creating a table of summary statistics. For this example, we will use the `auto` dataset that comes with Stata, and output the tables in markdown format. The output you will see is based on that format.\n\n::: {#c0444480 .cell execution_count=1}\n``` {.stata .cell-code code-fold=\"false\"}\n// Load sample data\nsysuse auto, clear\n\n// Create summary statistics table\nestpost summarize price mpg weight length\nest sto summary_stats\nesttab summary_stats using summary_stats.txt, ///\n    cells(\"mean(fmt(2)) sd(fmt(2)) min max\") ///\n    nomtitle nonumber md replace label\n```\n:::\n\n\n:::{#tbl-summary-stats}\n\n\n|                      |         mean |           sd |          min |          max |\n| -------------------- | :----------: | :----------: | :----------: | :----------: |\n| Price                |      6165.26 |      2949.50 |      3291.00 |     15906.00 |\n| Mileage (mpg)        |        21.30 |         5.79 |        12.00 |        41.00 |\n| Weight (lbs.)        |      3019.46 |       777.19 |      1760.00 |      4840.00 |\n| Length (in.)         |       187.93 |        22.27 |       142.00 |       233.00 |\n| Observations         |           74 |              |              |              |\n\n\n\n\nData source: Auto dataset\n\nTable 1: Summary Statistics\n:::\n\nSo how does this work?\n\n`estpost` catches the output of the `summarize` command and stores into many e() matrices, all part of a new \"summary_stats\".\n\nThen `esttab` formats the content to create a nice table. The `cells()` option specifies the contents of each table. It should use the \"matrices\" saved by `estpost`. The `nomtitle` option removes the title of the table. The `nonumber` option removes the row numbers. The `md` option specifies that the output format is markdown, but other options are possible. The `replace` option overwrites the file if it already exists. The `label` option uses variable labels instead of names. Within the `cells()` option, `name(fmt(???))` specifies the format of the cell content.\n\nNotice that if \"statistic\" are specified within quotes, they will be posted side by side. If they are not, they will be posted one below the other.\n\n## Advanced Summary Statistics\n\nYou can also generate more advanced summary statistics tables, including grouped statistics and custom formatting. Here's an example:\n\n::: {#1ae60d95 .cell execution_count=2}\n``` {.stata .cell-code code-fold=\"false\"}\n// Load sample data\nwebuse nlsw88, clear\n\n// Calculate summary statistics by occupation category\nestpost tabstat wage age tenure, by(race) statistics(mean sd min max n) columns(statistics)\nest sto advanced_summary\n// Create advanced summary statistics table\nesttab advanced_summary using advanced_summary.txt, ///\n    cells(\"mean(fmt(2)) sd(fmt(2)) min(fmt(1)) max(fmt(1)) count(fmt(0))\") ///\n    noobs nonumber nomtitle     ///\n    collabels(\"Mean\" \"Std. Dev.\" \"Min\" \"Max\" \"N\") ///\n    eqlabels(\"White\" \"Black\" \"Other\") ///\n    varlabels(wage \"&nbsp;&nbsp;Hourly Wage\" age \"&nbsp;&nbsp;Age\" tenure \"&nbsp;&nbsp;Job Tenure\") ///\n    alignment(r) width(20) ///\n    replace noline md\n```\n:::\n\n\n:::{#tbl-asummary-stats}\n\n\n|              |         Mean |    Std. Dev. |          Min |          Max |            N |\n| ------------ | :----------: | :----------: | :----------: | :----------: | :----------: |\n| White        |              |              |              |              |              |\n| &nbsp;&nbsp;Hourly Wage |         8.08 |         5.96 |          1.0 |         40.2 |         1637 |\n| &nbsp;&nbsp;Age |        39.27 |         3.08 |         34.0 |         46.0 |         1637 |\n| &nbsp;&nbsp;Job Tenure |         5.81 |         5.46 |          0.0 |         25.9 |         1627 |\n| Black        |              |              |              |              |              |\n| &nbsp;&nbsp;Hourly Wage |         6.84 |         5.08 |          1.2 |         40.7 |          583 |\n| &nbsp;&nbsp;Age |        38.81 |         2.98 |         34.0 |         45.0 |          583 |\n| &nbsp;&nbsp;Job Tenure |         6.50 |         5.62 |          0.0 |         24.8 |          578 |\n| Other        |              |              |              |              |              |\n| &nbsp;&nbsp;Hourly Wage |         8.55 |         5.21 |          1.8 |         25.8 |           26 |\n| &nbsp;&nbsp;Age |        39.31 |         3.25 |         34.0 |         44.0 |           26 |\n| &nbsp;&nbsp;Job Tenure |         4.95 |         5.24 |          0.2 |         21.2 |           26 |\n| Total        |              |              |              |              |              |\n| &nbsp;&nbsp;Hourly Wage |         7.77 |         5.76 |          1.0 |         40.7 |         2246 |\n| &nbsp;&nbsp;Age |        39.15 |         3.06 |         34.0 |         46.0 |         2246 |\n| &nbsp;&nbsp;Job Tenure |         5.98 |         5.51 |          0.0 |         25.9 |         2231 |\n\n\n\n\nData source: NLSW 1988\n\nAdvanced Summary Statistics by Race\n\n:::\n\nIn this example, notice that I use varlabels to provide custom labels for the variables. Because I want to use markdown for the output, I use `&nbsp;` to add spaces, and add some hierarchy on the tables.  I also use eqlabels to provide custom labels for the equation names (in this case, race categories). The alignment(r) option right-aligns all cells, althought it does not have an effect on md. The noline option removes the horizontal lines between rows.\n\n## Regression Table\n\nNext is the most common excercise we would do in Stata: regression analysis. Here's how you can create a table with regression results:\n\n::: {#dfcc4c92 .cell execution_count=3}\n``` {.stata .cell-code code-fold=\"false\"}\n// Load sample data\nsysuse auto, clear\nregress price weight mpg\nestimates store model1\nregress price weight mpg foreign\nestimates store model2\n\n// Create regression table\nesttab model1 model2 using regression_results.txt, ///\n    b(3) se(3) star(* 0.10 ** 0.05 *** 0.01) ///\n    r2 ar2 nonumber replace note(\"\") noline md ///\n    mtitle(\"Model 1\" \"Model 2\")\n```\n:::\n\n\n:::{#tbl-regression}\n\n\n|              |      Model 1    |      Model 2    |\n| ------------ | :-------------: | :-------------: |\n| weight       |        1.747*** |        3.465*** |\n|              |      (0.641)    |      (0.631)    |\n| mpg          |      -49.512    |       21.854    |\n|              |     (86.156)    |     (74.221)    |\n| foreign      |                 |     3673.060*** |\n|              |                 |    (683.978)    |\n| \\_cons       |     1946.069    |    -5853.696*   |\n|              |   (3597.050)    |   (3376.987)    |\n| *N*          |           74    |           74    |\n| *R*<sup>2</sup> |        0.293    |        0.500    |\n| adj. *R*<sup>2</sup> |        0.273    |        0.478    |\n\n<br>\n* *p* < 0.10, ** *p* < 0.05, *** *p* < 0.01\n\n\n\n\nData source: Auto, Standard errors in parentheses, * p<0.10, ** p<0.05, *** p<0.01\n\nRegression Results\n\n:::\n\nThis code is more straight forward. After the regressions are estimated, and stored with `est sto`, the `esttab` command is used to create the table. The `b(3)` and `se(3)` options specify that the coefficients and standard errors should be displayed with 3 decimal places. The `star()` option specifies the significance levels for the stars. The `r2 ar2` options include the R-squared and adjusted R-squared statistics. The `nonumber` option removes the row numbers. This is necessary for `markdown` tables, because markdown only allows for a single title row.\n\n## Correlation Matrix\n\nCorrelation matrices are also common in data analysis. They are easy enough to create with `correlate`. Making them into a table can also be easy:\n\n::: {#bbee2e27 .cell execution_count=4}\n``` {.stata .cell-code code-fold=\"false\"}\n// Generate correlation matrix\nestpost correlate price mpg weight length, matrix\nest sto corr_matrix\n// Create correlation table\nesttab corr_matrix using correlation_matrix.txt, ///\n    cell(\"rho(fmt(3))\") replace nonumber collabels(none) ///\n    nomtitle noline unstack label md\n```\n:::\n\n\n:::{#tbl-corr}\n\n\n|                      |        Price | Mileage (mpg) | Weight (lbs.) | Length (in.) |\n| -------------------- | :----------: | :----------: | :----------: | :----------: |\n| Price                |        1.000 |              |              |              |\n| Mileage (mpg)        |       -0.469 |        1.000 |              |              |\n| Weight (lbs.)        |        0.539 |       -0.807 |        1.000 |              |\n| Length (in.)         |        0.432 |       -0.796 |        0.946 |        1.000 |\n| Observations         |           74 |              |              |              |\n\n\n\n\nData source: Auto\n\nCorrelation matrix\n\n:::\n\nThis creates a correlation matrix with formatted coefficients. In contrast with `correlate`, if using `estatpost`, its necessary to also use the option `matrix`.\n\nIn case of `esttab`, it is necessary to use `unstuck`. But other than that, obtaining the tables is quite straightforward.\n\n## Regressions with Fixed Effects \n\nNow something that is very common in regression analysis: fixed effects models. A usual question is how to create tables that signal the inclusion of fixed effects. Here's an example:\n\n::: {#088d37d4 .cell execution_count=5}\n``` {.stata .cell-code code-fold=\"false\"}\n// Load panel data and set as panel\nwebuse nlswork, clear\nxtset idcode year\n// ssc install reghdfe\n\n// Run regressions\nreghdfe ln_wage tenure c.age##c.age \nest sto no_fe\n\nreghdfe ln_wage tenure c.age##c.age , absorb(idcode)\nest sto id_fe\nestadd local id_fe \"X\"\n\nreghdfe ln_wage tenure c.age##c.age , absorb(idcode year)\nest sto idyr_fe\nestadd local id_fe \"X\"\nestadd local yr_fe \"X\"\n\n// Create table\n \nesttab no_fe  id_fe idyr_fe using mreg.txt, ///\nscalar(\"id_fe Individual FE\" \"yr_fe Yr FE\") ///\nnoline  md  nonotes nomtitle  replace\n\n```\n:::\n\n\n:::{#tbl-corr}\n\n\n|              |          (1)                  |          (2)                  |          (3)                  |\n| ------------ | :---------------------------: | :---------------------------: | :---------------------------: |\n| tenure       |       0.0391<sup>\\*\\*\\*</sup> |       0.0217<sup>\\*\\*\\*</sup> |       0.0214<sup>\\*\\*\\*</sup> |\n|              |      (50.48)                  |      (27.21)                  |      (26.88)                  |\n| age          |       0.0752<sup>\\*\\*\\*</sup> |       0.0523<sup>\\*\\*\\*</sup> |       0.0750<sup>\\*\\*\\*</sup> |\n|              |      (21.65)                  |      (18.78)                  |       (7.03)                  |\n| c.age#c.age  |     -0.00109<sup>\\*\\*\\*</sup> |    -0.000672<sup>\\*\\*\\*</sup> |     -0.00107<sup>\\*\\*\\*</sup> |\n|              |     (-18.86)                  |     (-14.56)                  |     (-17.74)                  |\n| \\_cons       |        0.334<sup>\\*\\*\\*</sup> |        0.688<sup>\\*\\*\\*</sup> |        0.384                  |\n|              |       (6.62)                  |      (16.95)                  |       (1.29)                  |\n| *N*          |        28101                  |        27549                  |        27549                  |\n| Individual FE |                               |            X                  |            X                  |\n| Yr FE        |                               |                               |            X                  |\n\n\n\n\nData source: NLSW 1988, <sup>\\*</sup> *p* < 0.05, <sup>\\*\\*</sup> *p* < 0.01, <sup>\\*\\*\\*</sup> *p* < 0.001\n\nRegression Results with FE\n\n:::\n\nThis example shows how to use `estadd` to include additional information to a regression. This information can be later used in the table. In this case, the fixed effects are included in the table. The `scalar` option is used to include the extra information.\n\n## Conclusion\n\nI think these are the most basic tables you can create with `esttab`. There are many more options available, and you can customize the tables to your needs. Using Quarto, something I am doing more often, is to create the tables in Stata, modify the latex code, and then include them in the final document. This is a great way to create reproducible research.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}