{
  "hash": "d36d0c30e08ecf6c962ea250e68e6342",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using Quarto for Stata dynamic documents\nformat: html\n---\n\n## Introduction\n\nThis article is a simple example of how to use `Quarto` to create dynamic documents using `Stata`. Which is possible using the Stata kernel `nbstata` thanks to [Tim Huegerich](https://github.com/hugetim), who put this incredible tool together.\n\nTo use this, you will need:\n\n-   Stata 17 or higher\n-   python\n-   [nbstata](https://github.com/hugetim/nbstata)\n\n## Installation\n\nFor now lets assume that you have Stata and Python installed, and working together, so that you can use Stata from Python. If this is working, installing `nbstata` is as simple as typing the following from the command window:\n\n``` powershell\npip install nbstata\npython -m nbstata.install \n\n# or to update \npip install nbstata --upgrade\n```\n\nYou probably do not need `--conf-file`, but if you want to apply other options to Stata output, you may beed to create the config file, and modified as needed.\n\n## Quarto Setup\n\nWhile this page is being rendered as a quarto website project, you can also use the following YAML heading, once you installed `Python` and `nbstata` in your computer. You will also need Quarto (if using say VSC) or one of the latests iterations of Rstudio.\n\n``` yaml\n---\ntitle: Using Quarto for Stata dynamic documents\nformat: html\njupyter: nbstata\n---\n```\n\nThis request using the `nbstata` as the `kernel`, allowing Quarto to use Python to call on Stata.\n\n## Lets do this:\n\nLet us consider an example where we study the **mpg** and **weight** variables in **auto.dta**. In this example, all code used to construct the desired output will be displayed as fenced block code, followed by the output it produces. This is done using the option `*|echo: fenced`.\n\nWe first use the **sysuse** command to load the dataset and then describe the data using the **describe** command.\n\n::: {#8887abdf .cell execution_count=1}\n```` { .cell-code}\n```{{stata}}\nsysuse auto, clear\ndescribe\n```\n\n````\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>div.jp-Notebook .datagrid-container {min-height: 448px; }</style>\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n(1978 automobile data)\n\nContains data from C:\\Program Files\\Stata17/ado\\base/a/auto.dta\n Observations:            74                  1978 automobile data\n    Variables:            12                  13 Apr 2020 17:45\n                                              (_dta has notes)\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nmake            str18   %-18s                 Make and model\nprice           int     %8.0gc                Price\nmpg             int     %8.0g                 Mileage (mpg)\nrep78           int     %8.0g                 Repair record 1978\nheadroom        float   %6.1f                 Headroom (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\nweight          int     %8.0gc                Weight (lbs.)\nlength          int     %8.0g                 Length (in.)\nturn            int     %8.0g                 Turn circle (ft.)\ndisplacement    int     %8.0g                 Displacement (cu. in.)\ngear_ratio      float   %6.2f                 Gear ratio\nforeign         byte    %8.0g      origin     Car origin\n-------------------------------------------------------------------------------\nSorted by: foreign\n```\n:::\n:::\n\n\nNow, we want to check if **mpg** is always greater than 0 and less than 100. We use the **assert** command to perform the check. In this case, we do not want to include any output in the target HTML file, so we use the **quietly** attribute to modify the behavior of the **dd_do** Stata dynamic tag.\n\n::: {#66f235e7 .cell execution_count=2}\n```` { .cell-code}\n```{{stata}}\n assert mpg > 0 & mpg < 100\n```\n\n````\n:::\n\n\nIf the data do not satisfy the conditions, **quatro** will fail with an error message, which will occur if we run the same **assert** command in a do-file.\n\nNext, we want to summarize the **weight** variable:\n\n::: {#b8aba1eb .cell execution_count=3}\n```` { .cell-code}\n```{{stata}}\nsummarize weight\n```\n\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n      weight |         74    3019.459    777.1936       1760       4840\n```\n:::\n:::\n\n\nWe want to use the minimum and maximum values of **weight** in a sentence. Instead of copying and pasting the numbers from the **summarize** output, we can use the **`display`** Stata to show **r(min)** and **r(max)** stored results. We will also use the options `*| output: asis` to obtain text that follows markdown formatting.\n\n```` { .cell-code}\n```{{stata}}\n*| output: asis\ndisplay \"The variable weight has minimum value \"  %4.2f `r(min)' \" and \" ///\n         \"has maximum value \"   %4.2f `r(max)' \".\"\n```\n\n````\nThe variable weight has minimum value 1760.00 and has maximum value 4840.00.\n\n\nIn other words, if one wants to use dynamic tags, its possible to do so by simply using display, with the corresponding locals, so Stata evaluates the expressions as normal. `*| output: asis` is used so the output can still be interpreted using markdown syntax.\n\nAs with **`dyndoc`**, display can also be used as a calculator. For example, if we want to include the $range = max - min$ in a sentence, instead of calculating the number and then copying and pasting it, we can use\n\n```` { .cell-code}\n```{{stata}}\n*| output: asis\ndisplay \"The variable weight has range \"  %4.2f `r(max)'-`r(min)' \".\"\n```\n\n````\nThe variable weight has range 3080.00.\n\n\nNow, we want to graph **mpg** and **weight** using a scatterplot. There are at least two ways to do this.\n\nFirst, one can simply create the scatterplot using the same procedure as before:\n\n::: {#4063ce5c .cell execution_count=6}\n```` { .cell-code}\n```{{stata}}\nscatter mpg weight, mcolor(blue%50)\n```\n\n````\n\n::: {.cell-output .cell-output-display}\n![](stata_do1_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\nwhich generates a scatterplot of **mpg** and **weight** with 50% opacity color markers.\n\nNow, we want to export the graph to a file and include an image link to the file.\n\n::: {#e4dfab11 .cell execution_count=7}\n```` { .cell-code}\n```{{stata}}\nqui:graph export fig1.png, width(1600) replace\n```\n\n````\n:::\n\n\nThis produces a graph of 1600 pixels width.\n\n![scatter](fig1.png)\n\nIt is possible, however, to combine figure creation using quatro tags and directives. Here, however, you need to make sure all figures are named:\n\n::: {#fig-cost .cell .column-page layout-ncol='2' execution_count=8}\n```` { .cell-code}\n```{{stata}}\n*| label: fig-cost\n*| fig-cap: Price vs MPG\n*| fig-subcap:\n*|   - Foreign Cars\n*|   - Domestic Cars\n*| layout-ncol: 2\n*| column: page\n\nscatter price mpg if foreign==1, name(m1, replace) ylabel(0(4000)16000)\nqui:graph export fig2a.png, width(1600) replace\nscatter price mpg if foreign==0, name(m2, replace) ylabel(0(4000)16000)\nqui:graph export fig2b.png, width(1600) replace\n```\n\n````\n\n::: {.cell-output .cell-output-display}\n![Foreign Cars](stata_do1_files/figure-html/fig-cost-output-1.png){#fig-cost-1}\n:::\n\n::: {.cell-output .cell-output-display}\n![Domestic Cars](stata_do1_files/figure-html/fig-cost-output-2.png){#fig-cost-2}\n:::\n\nPrice vs MPG\n:::\n\n\nAnd of course, we can now the figure tags to link it to the text:\n\n@fig-cost provides a simple scatter between prices and MPG for foreign and domestic cars. While there seems to be a strong negative relationship between these variables among foreign cars (see @fig-cost-1), the relationship among domestic cars is much weaker, when looking at cars with a fuel efficiency larger than 15mpg (see @fig-cost-2).\n\nThe last approach, however, may not work with PDF format, or jupyter-notebook format, unless the figures are saved. But does seem to work with HTML and docx.\n\nNevertheless, one could also do the following:\n\n``` markdown\n::: {#fig-mpgprice layout-ncol=2 .column-page }\n![foreign](fig2a.png){#fig-mpgprice-1}\n![domestic](fig2b.png){#fig-mpgprice-2}\nPrice vs MPG\n:::\n```\n\nto produce\n\n::: {#fig-mpgprice .column-page layout-ncol=\"2\"}\n\n![foreign](fig2a.png){#fig-mpgprice-1}\n\n![domestic](fig2b.png){#fig-mpgprice-2}\n\nPrice vs MPG\n:::\n\nAs plot in @fig-mpgprice provides a simple scatter between prices and MPG for foreign and domestic cars. While there seems to be a strong negative relationship between these variables among foreign cars (see @fig-mpgprice-1), the relationship among domestic cars is much weaker, when looking at cars with a fuel efficiency larger than 15mpg (see @fig-mpgprice-2).\n\nIf using VScode, to render all formats at once, you need to type `quarto render filename.qmd` in the terminal.\n\n",
    "supporting": [
      "stata_do1_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}