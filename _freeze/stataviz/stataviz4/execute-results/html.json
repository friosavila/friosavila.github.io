{
  "hash": "0d7b04cc1124a7d1ac55a5adc547c1a1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Make Scatters more Colorful: `mscatter`\"\nsubtitle: \"Scatters across groups\"\ncode-fold: false\n---\n\n## Introduction \n\nThe program `mscatter` came as an answer to two questions, often asked on `statalist`. \n\n- How to produce Scatter plots `by` groups? to each group is labeled?\n- How can I change the colors, if I have more 15 groups in my graph?\n\nDoing plots that produce this is simple. One just needs to create multiple scatterplots, and combine them with `twoway`. This will produce you this kind of plot.\nFor example, if I had to produce and join 4 scatter plots (across different groups) I would do the following:\n\n```stata\ntwoway (scatter y x if z ==1, options) ///\n       (scatter y x if z ==2, options) ///\n       (scatter y x if z ==3, options) ///\n       (scatter y x if z ==4, options), ///\n       overall options\n```       \n\nDoing this for multiple groups, however, can be a pain. Thus, I decided to write a do-file that address this problem.\n\n## `mscatter`: scatter with Multiple groups\n\nFirst some minimal setup. The latest version of `mscatter` is available from `SSC`. You can install it using the following:\n\n```stata\nssc install mscatter\n```\n\nIn the examples below, I will also use the scheme `white2` within [`color_style`]](https://friosavila.github.io/stataviz/stataviz1.html). See instructions there if you want to install all its components.\n\nNow, how do you produce a scatter with multiple groups. The task is, in fact, simple. If I were to use `auto.dta` dataset, it would be something like this:\n\n::: {#79e1c682 .cell execution_count=1}\n``` {.stata .cell-code}\nsysuse auto, clear\ntwo scatter price mpg if foreign == 1 || ///\n    scatter price mpg if foreign == 0\ngraph export ms1.png, width(1200) replace   \n```\n:::\n\n\n![](ms1.png){width=80%}\n\nIn fact, I have been pointted out to one command by Nick Cox, named linkplot, which may also help you produce similar plots.\n\n::: {#6b198cde .cell execution_count=2}\n``` {.stata .cell-code}\nssc install linkplot\nlinkplot price mpg , link(foreign) asyvars recast(scatter)\ngraph export ms2.png, width(1200) replace   \n```\n:::\n\n\n![](ms2.png){width=80%}\n\nAnd produces pretty much the same. The limitation: only works with up to 15 groups. But who needs more right? Well, if you need more, you can use `mscatter`!\n\n::: {#4d065e2b .cell execution_count=3}\n``` {.stata .cell-code}\nset scheme white2                   // Lets use white scheme\nmscatter price mpg , over(rep78)    /// Upto here normal. I use over instead of By\n  alegend  legend(cols(5)) msize(3) /// add a legend with large dots\n  by(foreign)                       // and groups by foreign\ngraph export ms3.png, width(1200) replace   \n```\n:::\n\n\n![](ms3.png){width=80%}\n\nBut those are easy to do by hand. What if you have many groups. Lets see with some different data:\n\n::: {#e726fc59 .cell execution_count=4}\n``` {.stata .cell-code}\nwebuse nlswork\nmscatter ln_wage ttl_exp ,     /// normal\n          over(age)            /// but over many groups!\n          colorpalette(magma ) /// all color coded\n          alegend               // with a legend to match\ngraph export ms4.png, width(1200) replace           \n```\n:::\n\n\n![](ms4.png){width=80%}\n\nAnd as I show you before, mscatter can be combined with by()\n\n::: {#de44ebfa .cell execution_count=5}\n``` {.stata .cell-code}\nmscatter ln_wage ttl_exp , over(grade) ///\n      colorpalette(magma ) by(race, legend(off)) // legend(off) should go here\ngraph export ms5.png, width(1200) replace       \n```\n:::\n\n\n![](ms5.png){width=80%}\n\n\nOnly current limitation, you can use weights (for size of markers) but it will fail, if you have groups without observations based on **over** and **by** (difficult to explain and reproduce).\n\n## Other features\n\n`mscatter` has other features that might put it apart from other commands. While the original version was written to take advantage of **frames**. The current version will also work with earlier Stata versions (at least V14), using `preserve/restore` commands.\n\nIn addition to this, `mscatter` may also allow you to add fitted plots to your scatter!\n\nLets see how this works:\n\n::: {#43c14218 .cell execution_count=6}\n``` {.stata .cell-code}\nwebuse nlswork, clear\nset seed 10\nkeep if runiform()<.2\ncolor_style tableau\nmscatter ln_wage ttl_exp , over(race)  ///\n        fit(qfitci) ///<-adds quadratic fit with CI\n        mfcolor(%5) mlcolor(%5) alegend ytitle(\"Log Wages\")  \n\ngraph export ms6.png, width(1200) replace         \n```\n:::\n\n\n![](ms6.png){width=80%}\n\nAs you can see, this figure plots log of wages agains total experience across race groups. In addition to this, however, it also adds a fitted plot using quadratic fit using the option `fit(qfitci)`. You can add here other options that are command specific. Of course, with the addition of this, you may want to drop the scatter plot all together \n\n::: {#e4932864 .cell execution_count=7}\n``` {.stata .cell-code}\nmscatter ln_wage ttl_exp , over(race)  ///\n        fit(qfitci) mfcolor(%5) mlcolor(%5) ///\n        noscatter  /// Asks not to show the scatter points\n        alegend ytitle(\"Log Wages\") \n\ngraph export ms7.png, width(1200) replace         \n```\n:::\n\n\n![](ms7.png){width=80%}\n\n## Conclusions\n\n`mscatter` is a data-visualization utility that may enable you to create informative graphs capturing correlations between 2 variables. \n\nWhile its use may be limited, I believe that those who need it, may find this a good tool to have for their arsenal. \n\nLastly, try checking the helpfile, where I add other options, not described here.\n\nTil next time!\n\n",
    "supporting": [
      "stataviz4_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}