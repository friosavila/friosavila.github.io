{
  "hash": "b7e18c218a6a65e7bf3c06a6d6aee0a2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"How to make Waffles: `waffle_plot`\"\nsubtitle: \"Alternative to Pies\"\ncode-fold: false\nexecute:\n  freeze: auto\n---\n\n## Disclaimer\n\nLet me start by stating that what I am about to present is not the **only** way. It is simply the approach I prefer, particularly after some flexing some programming mussiles, and when I wish to avoid repetitive typing.\n\nHaving said that, I want to acknowledge that step-by-step guides on this type of plots can be found elsewhere. They can be quite beneficial, particularly if the command I am presenting does not meet your needs.\n\nLearning how to create these plots step-by-step provides greater flexibility, but I believe that using the `waffle_plot` (available from SSC and fra) is versatile enough for most purposes.\n\nSo, without further ado, let's get started.\n\n## What is a waffle plot?\n\nA **waffle** plot is a type of chart similar to a **pie** chart (how interesting we like to name them as foods), because they can be used to visualize sample compositions. \n\nThe key difference between a waffle plot and a pie chart is the way the information is displayed. Whereas a pie chart depicts the composition as pieces of a circle, a waffle plot represents it as dots in a box. Interestingly, the dots in a waffle plot resemble a waffle, hence the name.\n\n![waffle](waffle.jpg)\n\n## But what are they, really? \n\nIf you want an insider look of a waffle plot, they are nothing else than a ***scatter*** plot within a box. The points are spaced out evenly both horizontally and vertically, which makes it a bit harder to display detailed information. For example in a 10x10 scatterplot, you cannot differentiate between 13.6 and 13.7.\n\nMaking waffle plots isn't too tricky, but they can take a bit of time. Thus, I decided to write a small `ado` that makes creating these type of plots easily.\n\nIn what follows, I will show you how to use `waffle_plot` to make this type of plots in Stata!. But first, I would suggest you to get the following two packages from ssc (or fra):\n\n```stata\nssc install waffle_plot\nssc install color_style\n```\n## Making Waffles\n\n### Simple waffle plot\n\nSay that you want to do a waffle plot, and want to show that 35% of individuals do something. If so, you will type:\n\n::: {#5eb0dd5c .cell execution_count=1}\n``` {.stata .cell-code}\nset scheme white2\ncolor_style tableau\nwaffle_plot 35 \n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>div.jp-Notebook .datagrid-container {min-height: 448px; }</style>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](stataviz3_files/figure-html/cell-2-output-2.png){}\n:::\n:::\n\n\nWhen used like this, waffle_plot acts like an immediate command. You just feed it data, and it makes the waffle.\n\nHowever, as you can see on above, the simple waffle is not very attractive. So lets try improve on it.\n\n### Beautify\n\nYou can change the size and symbol. However, you need transfer that information using sctopt (scatter options). Although, if the options are related to the marker options, you can add them directly to command line.\n\n::: {#11caad48 .cell execution_count=2}\n``` {.stata .cell-code}\nwaffle_plot 35, msize(6)        /// Increase size of Dots\n                msymbol(square) /// and change them to Squares\n                legend(order(1 \"The blues\" 2 \"The rest\")) /// ads Labels\n                title(\"First nice? Waffle\")\n```\n\n::: {.cell-output .cell-output-display}\n![](stataviz3_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\nOf course, if your goal is to show the distribution for more than just 1 group, you can add more numbers to the command. However, the command will only recognize new numbers as long as the total is below 100. \nIf the total is below 100, the last group is considered the \"rest\", and colors for that group is assigned using option `color0`. If the total is above 100, the last values will be ignored, unless you use the option `total[(number)]`. To either rescale it based on the information given, or providing a \"Total\" for rescaling.\n\n::: {#3a1924dd .cell execution_count=3}\n``` {.stata .cell-code}\nwaffle_plot 12 45 7, /// lets use 3 groups\n    sctopt(msize(6) msymbol(square)) /// with some sct options\n    color0(gs10) /// adding color to the \"rest\" category\n    color(blue red) /// and to the other two\n    legend(order(1 \"Democrats\" 2 \"Republicans\" 3 \"Green Party\"))\n```\n\n::: {.cell-output .cell-output-display}\n![](stataviz3_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\nSomething else I added to the command was the ability of chaning the dimensions of the `BOX`. By default, your waffle is a 10x10 matrix. this can be changed using `xnobs()` and `ynobs()`.\n\n::: {#58578951 .cell execution_count=4}\n``` {.stata .cell-code}\nwaffle_plot 12 45 7, /// Uses numbers between 0-1.\n  msize(6) msymbol(square) mlcolor(black) /// Other SCT options\n  color0(gs10) color(blue red green) /// Color for rest and each group\n  legend(order(1 \"Rep\" 2 \"dem\" 3 \"green\" 4 \"Undecided\")) xnobs(12) ynobs(8)\n```\n\n::: {.cell-output .cell-output-display}\n![](stataviz3_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n## Further use: Beyond immediate \n\nThe previous section shows how to produce waffle plots providing the data you want to plot. But what if you want to use your own data set. You can certainly estimate the numbers yourself, and then make the plot, but it may be convinient using data from a stored dataset.\n\nDoing that would even allow you to create multiple plots using `by()`. I provide some examples next mix and matching many options.\n\n::: {#ee914b85 .cell execution_count=5}\n``` {.stata .cell-code}\nset graph off\nsysuse pop2000, clear\nwaffle_plot black indian asian island, /// provides 3 variables with Pop for each\nlegend(order(1 \"Black\" 2 \"Indian\" 3 \"Asian\" 4 \"Island\") cols(4)) ///\nmsize(3) mlcolor(black)  /// Scatter options\ntotal  /// This is different. Im asking to construct shares internally\nby(agegrp, title(\"Population Composition\") /// Using by(), Notice (sub)Title\ncompact subtitle(\"by Age group\") note(\"\") cols(6)) /// and Cols\nxnobs(15)  // Just Because I want to show a rectangle\ngraph export sv10.png, height(500) width(800) replace\n```\n:::\n\n\n![](sv10.png)\n\nThis first one uses data directly from the cesus, to plot the proportion of Blacks, indian, asiand, and islanders by age group in the US. I excluded white population on purpose, so i want the numbers create the shares based on this 5 groups only. \n\n::: {#dbca2c9a .cell execution_count=6}\n``` {.stata .cell-code}\nsysuse cancer, clear\nwaffle_plot died, ///\ncolor0(gs15) /// Color for the left out \nlegend(off) /// Legend\nby(drug, cols(3)) msize(3) ///\ntitle(\"Share of people who died by Drug type\") ///\nflip nobs(15)   // two new things. FLIP and increase to 15x15 s\ngraph export sv11.png, height(500) width(800) replace\n```\n:::\n\n\n![](sv11.png)\n\nThis one plots the share of people who died based on access to a particular drug. It uses `nobs()` to allow for more Dots, and flip, for a different way of presenting the information. \n\n::: {#74294b34 .cell execution_count=7}\n``` {.stata .cell-code}\nsysuse voter, clear\nxi, noomit:waffle_plot i.cand [w=pop], /// Notice weights, and \"factor\"\ncolor(cranberry*0.7 navy*0.7 forest_green*.5) /// Special colors\nmsize(4) mlcolor(black%50) ///\nby(inc, title(\"1992 President Elections\") subtitle(\"by Family Income\")) ///\nlegend(order(1 \"Clinton\" 2 \"Bush\" 3 \"Perot\") cols(3)) \ngraph export sv12.png, height(500) replace\n```\n:::\n\n\n![](sv12.png)\n\nThis last one shows you can use the option \"factor\", you can also use weights, and make use of special colors selection.\n\n## Conclusions\n\nBecause `waffle_plot` is just a collection of scatter plots, you can use most `twoway graph` options with this command. Although I have not tried all of them. So handle with care. \n\nIn any case, this command does the heavy lifting, you can do the fineness.\n\nTil next time\n\n",
    "supporting": [
      "stataviz3_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}